generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String
  role          String        @default("user")
  phone         String?
  accounts      Account[]
  Reservations  Reservation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Reservation {
  id        String   @id @default(cuid())
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  price     Int
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId    String
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  Payment   Payment?
}

model Payment {
  id            String      @id @default(cuid())
  method        String?
  amount        Int
  status        String      @default("unpaid")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservationId String      @unique
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Amenities {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RoomAmenities RoomAmenities[]
}

model RoomAmenities {
  id          String    @id @default(cuid())
  roomId      String
  Room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenitiesId String
  Amenities   Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)
}

model Room {
  id            String          @id @default(cuid())
  name          String
  description   String          @db.Text
  image         String
  price         Int
  capacity      Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RoomAmenities RoomAmenities[]
  Reservations  Reservation[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  reatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}
